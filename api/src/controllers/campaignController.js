const Campaign = require("../models/campaignModel");
const nodemailer = require("nodemailer");
const db = require("../config/dbPool");
const transporter = nodemailer.createTransport({
  host: 'smtp.ethereal.email',
  port: 587,
  auth: {
      user: 'emerson.morissette51@ethereal.email',
      pass: 'th2x3uny4751H931d4'
  }
});

const campaignController = {
  get: async (req, res) => {
    try {
      const { campaign_id } = req.query; // L·∫•y campaign_id t·ª´ query string
  
      if (campaign_id) {
        // N·∫øu c√≥ campaign_id, g·ªçi getByID
        const campaign = await Campaign.getByID(campaign_id);
        if (campaign) {
          res.status(200).json(campaign);
        } else {
          res.status(404).json({ message: "Chi·∫øn d·ªãch kh√¥ng t·ªìn t·∫°i." });
        }
      } else {
        // N·∫øu kh√¥ng c√≥ campaign_id, g·ªçi get
        const campaigns = await Campaign.get();
        res.status(200).json(campaigns);
      }
    } catch (error) {
      res.status(500).json({ message: "C√≥ l·ªói x·∫£y ra! L·ªói: ", error });
    }
  },
  add: async (req, res) => {
    try {
      const { name, email_id, send_at, status } = req.body;

      if (!name) {
        return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o: name." });
      }

      const result = await Campaign.add({ name, email_id, send_at, status });
      res.status(201).json({ message: "Th√™m chi·∫øn d·ªãch th√†nh c√¥ng!", campaign_id: result.insertId });
    } catch (error) {
      res.status(500).json({ message: "C√≥ l·ªói x·∫£y ra khi th√™m chi·∫øn d·ªãch!", error });
    }
  },

  update: async (req, res) => {
    const { campaign_id, name, email_id, groups_ids } = req.body;

    try {
      // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
      if (!campaign_id || !name || !email_id || !Array.isArray(groups_ids)) {
        return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o ho·∫∑c groups_ids kh√¥ng h·ª£p l·ªá." });
      }

      // C·∫≠p nh·∫≠t chi·∫øn d·ªãch
      const result = await Campaign.update({ campaign_id, name, email_id, groups_ids });
      if (result.affectedRows === 0) {
        return res.status(404).json({ message: "Chi·∫øn d·ªãch kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng c√≥ thay ƒë·ªïi." });
      }

      // N·∫øu c·∫≠p nh·∫≠t th√†nh c√¥ng, tr·∫£ v·ªÅ th√¥ng b√°o
      res.status(200).json({ message: "C·∫≠p nh·∫≠t chi·∫øn d·ªãch th√†nh c√¥ng!" });
    } catch (error) {
      res.status(500).json({ message: "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t chi·∫øn d·ªãch!", error });
    }
  },


  delete: async (req, res) => {
    try {
      const { campaign_id } = req.body;

      if (!campaign_id) {
        return res.status(400).json({ message: "Thi·∫øu campaign_id." });
      }

      const result = await Campaign.delete(campaign_id);
      if (result.affectedRows === 0) {
        res.status(404).json({ message: "Chi·∫øn d·ªãch kh√¥ng t·ªìn t·∫°i." });
      } else {
        res.status(200).json({ message: "X√≥a chi·∫øn d·ªãch th√†nh c√¥ng!" });
      }
    } catch (error) {
      res.status(500).json({ message: "C√≥ l·ªói x·∫£y ra khi x√≥a chi·∫øn d·ªãch!", error });
    }
  },
  startCampaign : async (req, res) => {
    const { campaign_id } = req.body; // Campaign ID s·∫Ω ƒë∆∞·ª£c truy·ªÅn t·ª´ client
  
    try {
      // B∆∞·ªõc 1: L·∫•y th√¥ng tin chi·∫øn d·ªãch t·ª´ b·∫£ng campaigns
      const [campaigns] = await db.query('SELECT * FROM campaigns WHERE campaign_id = ?', [campaign_id]);
      if (!campaigns.length) {
        return res.status(404).json({ error: "Campaign kh√¥ng t·ªìn t·∫°i" });
      }
  
      const campaign = campaigns[0];
  
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i campaign th√†nh "Pending" ngay l·∫≠p t·ª©c
      await db.query('UPDATE campaigns SET status = ?, send_at = NOW() WHERE campaign_id = ?', ['Pending', campaign_id]);
  
      // B∆∞·ªõc 2: L·∫•y th√¥ng tin nh√≥m li√™n quan ƒë·∫øn campaign_id t·ª´ b·∫£ng campaign_groups
      const [groupContacts] = await db.query(`
        SELECT c.email 
        FROM group_contacts gc
        JOIN contacts c ON gc.contact_id = c.contact_id
        WHERE gc.group_id IN (SELECT group_id FROM campaign_groups WHERE campaign_id = ?)
        AND c.is_unsubscribed = 0`, // L·ªçc c√°c li√™n h·ªá kh√¥ng h·ªßy ƒëƒÉng k√Ω
      [campaign_id]);
  
      const emails = groupContacts.map(contact => contact.email).join(", ");
  
      if (!emails) {
        return res.status(404).json({ error: "Kh√¥ng c√≥ ng∆∞·ªùi nh·∫≠n h·ª£p l·ªá cho chi·∫øn d·ªãch n√†y." });
      }
  
      // B∆∞·ªõc 3: L·∫•y subject v√† content t·ª´ b·∫£ng emails d·ª±a tr√™n email_id c·ªßa campaign
      const [emailTemplates] = await db.query('SELECT * FROM emails WHERE email_id = ?', [campaign.email_id]);
      if (!emailTemplates.length) {
        return res.status(404).json({ error: "Email template kh√¥ng t·ªìn t·∫°i" });
      }
  
      const emailTemplate = emailTemplates[0];
      
      // B∆∞·ªõc 4: G·ª≠i email trong n·ªÅn (background)
      sendEmailInBackground(campaign_id, emails, emailTemplate.subject, emailTemplate.content);
  
      // Tr·∫£ l·ªùi ngay l·∫≠p t·ª©c r·∫±ng chi·∫øn d·ªãch ƒë√£ b·∫Øt ƒë·∫ßu
      res.status(200).json({ message: "Chi·∫øn d·ªãch ƒë√£ ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu v√† email ƒëang ƒë∆∞·ª£c g·ª≠i!" });
    } catch (error) {
      console.error("Error starting campaign: ", error);
      res.status(500).json({ error: "ƒê√£ c√≥ l·ªói x·∫£y ra khi b·∫Øt ƒë·∫ßu chi·∫øn d·ªãch." });
    }
  }
  
};
const sendEmailInBackground = async (campaign_id, emails, subject, content) => {
  try {
    const info = await transporter.sendMail({
      from: '"Maddison Foo Koch üëª" <maddison53@ethereal.email>', // Ng∆∞·ªùi g·ª≠i
      to: emails, // Ng∆∞·ªùi nh·∫≠n (danh s√°ch email)
      subject: subject, // Subject t·ª´ email template
      text: content, // N·ªôi dung email (text)
      html: content, // N·ªôi dung email (html)
    });

    console.log("Message sent: %s", info.messageId);

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i campaign th√†nh "Complete" sau khi g·ª≠i email th√†nh c√¥ng
    await db.query('UPDATE campaigns SET status = ? WHERE campaign_id = ?', ['Complete', campaign_id]);
  } catch (error) {
    console.error("Error sending email in background: ", error);
    
    // C·∫≠p nh·∫≠t tr·∫°ng th√°i campaign th√†nh "Draft" n·∫øu c√≥ l·ªói
    await db.query('UPDATE campaigns SET status = ? WHERE campaign_id = ?', ['Draft', campaign_id]);
  }
};
module.exports = campaignController;